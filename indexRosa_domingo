<!DOCTYPE html>
<html lang="es">

<head>
  <meta name="" charset="utf-8" content="" />
  <title>Food Mayhem</title>
  <script src="//cdn.jsdelivr.net/npm/phaser@3.11.0/dist/phaser.js"></script>
</head>

<body style="text-align:center">

  <script type="text/javascript">

    var Player = new Phaser.Class({
      Extends: Phaser.Physics.Arcade.Sprite,
      initialize:

        function Player(newScene, x, y) {
          Phaser.Physics.Arcade.Sprite.call(this, newScene, x, y, 'icy');

          this.timeSinceLastIncrement = -1;

          this.health = 100;
          this.lifeBar = null;
          this.dead = false;

          this.attackDmg = 20;
          this.distAttackDmg = 10;
          this.attackRange = 50;
          this.attackCooldown = 1;
          this.attackHitbox = new Phaser.Physics.Arcade.Image(newScene, this.x, this.y, 'icyattack', 4);
          this.bullets = this.scene.physics.add.group({ classType: Bullet, runChildUpdate: true });

          this.speed = 100;

          this.scene = newScene;

          this.control = false;
          this.keys;
          this.pad;
          this.buttons;
          this.hitSound = this.scene.sound.add('hitSound', { loop: false });

          this.initInput();
          this.initAnimations();

        },

      move: function (scene, enemies) {
        this.pad = this.scene.input.gamepad.getPad(0);
        if (!this.control && !this.dead) {
          this.setVelocity(0);

          if (this.keys['left'].isDown) {
            this.setVelocityX(-this.speed);

            if (!(this.anims.getCurrentKey() === 'up' || this.anims.getCurrentKey() === 'down'))
              this.anims.play('left', true);
          } else if (this.keys['right'].isDown) {
            this.setVelocityX(this.speed);

            if (!(this.anims.getCurrentKey() === 'up' || this.anims.getCurrentKey() === 'down'))
              this.anims.play('right', true);
          }

          if (this.keys['up'].isDown) {
            this.setVelocityY(-this.speed);
            this.anims.play('up', true);

          } else if (this.keys['down'].isDown) {
            this.setVelocityY(this.speed);
            this.anims.play('down', true);
          }

          if (this.scene.input.activePointer.isDown) {
            if (this.scene.input.activePointer.rightButtonDown()) {
              this.distAttack(this.scene.input.activePointer, enemies);
            } else {
              this.attack();
            }

          }

          if (this.body.velocity.equals(new Phaser.Math.Vector2(0, 0)) && this.health > 0 && !(this.anims.getCurrentKey() === 'punch')) {
            this.anims.play('turn', true);
          } else if (this.health === 0 && !this.dead) {
            this.anims.play('death', true);
            this.dead = true;
          }



        } else if (this.control && !this.dead) {
          if (this.pad.axes.length) {

            var axisH = this.pad.axes[0].getValue();
            var axisV = this.pad.axes[1].getValue();

            this.setVelocityX(this.speed * axisH);
            this.setVelocityY(this.speed * axisV);

            if (axisH < 0) {

              if (!(this.anims.getCurrentKey() === 'up' || this.anims.getCurrentKey() === 'down'))
                this.anims.play('left', true);
            } else if (axisH > 0) {

              if (!(this.anims.getCurrentKey() === 'up' || this.anims.getCurrentKey() === 'down'))
                this.anims.play('right', true);
            }

            if (axisV < 0) {
              this.anims.play('up', true);
            } else if (axisV > 0) {
              this.anims.play('down', true);
            }

            if (this.pad.isButtonDown(2)) {
              this.attack();
            }

            if (this.pad.isButtonDown(3)) {
              this.distAttack(this.scene.input.activePointer, enemies);
            }

            if (this.body.velocity.equals(new Phaser.Math.Vector2(0, 0)) && this.health > 0 && !(this.anims.getCurrentKey() === 'punch')) {
              this.anims.play('turn', true);
            } else if (this.health === 0 && !this.dead) {
              this.anims.play('death', true);
              this.dead = true;
            }

          }
        }
      },

      attack: function (targets) {
        this.actualTime = this.scene.time.now / 1000;

        if (this.actualTime > (this.timeSinceLastIncrement + this.attackCooldown)) {

          if (this.player1) {
            this.anims.play('punch', true);
          } else {
            this.anims.play('P2punch', true);
          }

          this.setVelocityX(0);
          this.setVelocityY(0);
          this.attackHitbox.x = this.x;
          this.attackHitbox.y = this.y + 20;
          //this.attackHitbox.enable = true;
          this.scene.physics.add.existing(this.attackHitbox);
          this.hitSound.play();

          this.timeSinceLastIncrement = this.scene.time.now / 1000;

        }

        this.on('animationcomplete', function () {
          console.log("animación completada");
          //this.knightStateMachine.setState('idle')

          this.attackHitbox.body.enable = false;
          this.scene.physics.world.remove(this.attackHitbox.body);
        });
      },

      distAttack: function (pointer, enemies) {
        this.actualTime = this.scene.time.now / 1000;

        console.log("Right pointer Down")
        if (this.actualTime > (this.timeSinceLastIncrement + this.attackCooldown)) {

          // Get bullet from bullets group
          var bullet = this.bullets.get().setActive(true).setVisible(true);
          if (bullet) {
            bullet.fire(this, pointer);
            var damage = this.distAttackDmg;
            this.scene.physics.add.collider(enemies, bullet, function (enemyHit, bull) {
              console.log('Daño de la bala' + damage);
              enemyHit.getHurt(damage);

              // Destroy bullet
              bull.destroy();
            });

            this.timeSinceLastIncrement = this.scene.time.now / 1000;

          }
        }

      },

      checkGamepad: function () {
        if (this.scene.input.gamepad.total === 1) {
          this.control = true;
        }


      },

      initAnimations: function () {

        this.scene.anims.create({
          key: 'down',
          frames: this.scene.anims.generateFrameNumbers('icy', { start: 7, end: 12 }),
          frameRate: 10,
          repeat: -1
        });

        this.scene.anims.create({
          key: 'turn',
          frames: this.scene.anims.generateFrameNumbers('icy', { start: 0, end: 4 }),
          frameRate: 10,
          repeat: -1
        });

        this.scene.anims.create({
          key: 'up',
          frames: this.scene.anims.generateFrameNumbers('icy', { start: 14, end: 19 }),
          frameRate: 10,
          repeat: -1
        });

        this.scene.anims.create({
          key: 'left',
          frames: this.scene.anims.generateFrameNumbers('icy', { start: 28, end: 32 }),
          frameRate: 15,
          repeat: -1
        });

        this.scene.anims.create({
          key: 'right',
          frames: this.scene.anims.generateFrameNumbers('icy', { start: 21, end: 25 }),
          frameRate: 15,
          repeat: -1
        });

        this.scene.anims.create({
          key: 'death',
          frames: this.scene.anims.generateFrameNumbers('icyattack', { start: 36, end: 44 }),
          frameRate: 10
        });

        this.scene.anims.create({
          key: 'punch',
          frames: this.scene.anims.generateFrameNumbers('icyattack', { frames: [0, 1, 2, 3, 4, 5] }),
          frameRate: 10,
        });
      },

      initInput: function () {

        this.keys = this.scene.input.keyboard.addKeys({
          'up': Phaser.Input.Keyboard.KeyCodes.W,
          'down': Phaser.Input.Keyboard.KeyCodes.S,
          'left': Phaser.Input.Keyboard.KeyCodes.A,
          'right': Phaser.Input.Keyboard.KeyCodes.D
        });

      },


    });

    var Enemy = new Phaser.Class({
      Extends: Phaser.Physics.Arcade.Sprite,
      initialize:


        function Enemy(newScene, x, y) {
          Phaser.Physics.Arcade.Sprite.call(this, newScene, x, y, 'malvin');

          this.timeSinceLastIncrement = -3;
          this.actualTime;

          this.health = 100;
          this.speed = 70;
          this.dead = false;

          this.attackDmg = 10;
          this.attackRange = 50;
          this.attackCooldown = 3;
          this.target;

          this.scene = newScene;
          newScene.add.existing(this);
          newScene.physics.add.existing(this);
          this.setCollideWorldBounds(true);

          this.initAnimations();
        },

      initAnimations: function () {
        this.scene.anims.create({
          key: 'malvinDown',
          frames: this.scene.anims.generateFrameNumbers('malvin', { start: 0, end: 5 }),
          frameRate: 10,
          repeat: -1
        });

        this.scene.anims.create({
          key: 'malvinUp',
          frames: this.scene.anims.generateFrameNumbers('malvin', { start: 6, end: 11 }),
          frameRate: 10,
          repeat: -1
        });

        this.scene.anims.create({
          key: 'malvinRight',
          frames: this.scene.anims.generateFrameNumbers('malvin', { start: 12, end: 15 }),
          frameRate: 10,
          repeat: -1
        });

        this.scene.anims.create({
          key: 'malvinLeft',
          frames: this.scene.anims.generateFrameNumbers('malvin', { start: 18, end: 21 }),
          frameRate: 10,
          repeat: -1
        })

        this.scene.anims.create({
          key: 'malvinDie',
          frames: this.scene.anims.generateFrameNumbers('icyattack', { start: 36, end: 44 }),
          frameRate: 10,
        });


      },

      hunt: function (targets) {
        if (!targets[0].dead || !targets[1].dead) {
          this.getTarget(targets);
          if (!this.dead) {
            this.direction = new Phaser.Math.Vector2(this.target.x - this.x, this.target.y - this.y);
            this.module = this.direction.length();
            if (this.module < this.attackRange) {
              this.setVelocityX(0);
              this.setVelocityY(0);
              this.attack(this.target);
            } else {
              this.setVelocityX((this.direction.x / this.module) * this.speed);
              this.setVelocityY((this.direction.y / this.module) * this.speed);
            }

            if (this.direction.x > 0 && !(this.anims.getCurrentKey() === 'malvinUp' || this.anims.getCurrentKey() === 'malvinDown')) {
              this.anims.play('malvinRight', true);
            } else if (this.direction.x < 0 && !(this.anims.getCurrentKey() === 'malvinUp' || this.anims.getCurrentKey() === 'malvinDown')) {
              this.anims.play('malvinLeft', true);
            }

            if (this.direction.y > 0) {
              this.anims.play('malvinDown', true)
            } else if (this.direction.y < 0) {
              this.anims.play('malvinUp', true);
            }


          }
        } else {
          this.setVelocityX(0);
          this.setVelocityY(0);
          this.anims.stop();
        }
      },

      attack: function (target) {
        this.actualTime = this.scene.time.now / 1000;

        if (this.actualTime > (this.timeSinceLastIncrement + this.attackCooldown)) {
          target.health -= this.attackDmg;
          target.lifeBar.draw(target.health);

          this.timeSinceLastIncrement = this.scene.time.now / 1000;
        }

      },

      getTarget: function (targets) {
        var distances = [];
        var i;
        var bestDistance;

        distances[0] = Phaser.Math.Distance.Between(this.x, this.y, targets[0].x, targets[0].y);
        bestDistance = distances[0];
        if (!targets[0].dead) {
          this.target = targets[0];
        }

        for (i = 1; i < targets.length; i++) {
          distances[i] = Phaser.Math.Distance.Between(this.x, this.y, targets[i].x, targets[i].y);
          if (bestDistance > distances[i] || this.target.dead) {
            bestDistance = distances[i];
            if (!targets[i].dead) {
              this.target = targets[i];
            }
          }
        }
      },

      getHurt: function (damage) {
        console.log("Daño:" + damage)
        this.health -= this.damage;
        if (this.health === 0 && !this.dead) {
          console.log("Se mueren")
          this.dead = true;
          this.destroy();
        }
      }
    })

    var Bullet = new Phaser.Class({

      Extends: Phaser.GameObjects.Image,

      initialize:

        // Bullet Constructor
        function Bullet(scene) {
          Phaser.GameObjects.Image.call(this, scene, 0, 0, 'bullet');
          this.speed = 1;
          this.born = 0;
          this.direction = 0;
          this.xSpeed = 0;
          this.ySpeed = 0;
          this.setSize(12, 12, true);
        },

      fire: function (shooter, target) {
        this.setPosition(shooter.x, shooter.y); // Initial position
        this.direction = Math.atan((target.x - this.x) / (target.y - this.y));

        // Calculate X and y velocity of bullet to moves it from shooter to target
        if (target.y >= this.y) {
          this.xSpeed = this.speed * Math.sin(this.direction);
          this.ySpeed = this.speed * Math.cos(this.direction);
        }
        else {
          this.xSpeed = -this.speed * Math.sin(this.direction);
          this.ySpeed = -this.speed * Math.cos(this.direction);
        }

        this.rotation = shooter.rotation; // angle bullet with shooters rotation
        this.born = 0; // Time since new bullet spawned

        // this.setActive(false);
        // this.setVisible(false);

      },

      update: function (time, delta) {
        this.x += this.xSpeed * delta;
        this.y += this.ySpeed * delta;
        this.born += delta;
        if (this.born > 1800) {
          this.setActive(false);
          this.setVisible(false);
        }
      }

    });

    var LifeBar = new Phaser.Class({

      initialize:

        function LifeBar(scene, x, y) {
          this.bar = new Phaser.GameObjects.Graphics(scene);

          this.x = x;
          this.y = y;

          this.draw(100);

          scene.add.existing(this.bar);
        },

      draw(playerHp) {
        this.bar.clear();

        //  BG
        if (playerHp == 100) {
          this.bar.fillStyle(0x32C93B);
          this.bar.fillRect(this.x, this.y, 132, 10);
        }
        else if (playerHp < 100 && playerHp > 0) {
          var width = (132 / 100) * playerHp;
          this.bar.fillStyle(0x32C93B);
          this.bar.fillRect(this.x, this.y, width, 10);
        }
        else if (playerHp <= 0) {
          this.bar.fillRect(this.x, this.y, 0, 0);
        }
      },
    });

    var MainGame = new Phaser.Class({
      Extends: Phaser.Scene,

      initialize:

        function MainGame() {
          Phaser.Scene.call(this, { key: 'mainGame' });

          this.player;
          this.player2;
          this.players;
          this.enemies;

          this.life1;

        },

      preload: function () {
        //Imágenes de escenario
        this.load.image('map', 'assets/escenario/map1.png');
        this.load.image('valla', 'assets/escenario/valla1.png');
        this.load.image('valla1', 'assets/escenario/valla2.1.png');
        this.load.image('valla2', 'assets/escenario/valla2.2.png');
        this.load.image('valla3', 'assets/escenario/valla3.png');

        this.load.image('lifeLevelP1', 'assets/Interfaz/nivelVida.png');
        this.load.image('lifeLevelP2', 'assets/Interfaz/nivelVidaP2.png');
        this.load.image('lifeBarP1', 'assets/Interfaz/barraVidaP1.png');
        this.load.image('lifeBarP2', 'assets/Interfaz/barraVidaP2.png');
        this.load.image('musicActive', 'assets/Interfaz/BotonActMusica.png');
        this.load.image('musicInactive', 'assets/Interfaz/BotonDesactMusica.png');
        this.load.image('pause', 'assets/star.png');
        this.load.image('inventory', 'assets/Interfaz/inventario.png');
        this.load.image('sword', 'assets/espada.png');
        this.load.image('swordSelec', 'assets/espadaSelec.png');



        //Imágenes de Icy
        this.load.spritesheet('icy', 'assets/icy.png', { frameWidth: 64, frameHeight: 64 });
        this.load.spritesheet('icyattack', 'assets/icyattack.png', { frameWidth: 64, frameHeight: 64 });
        this.load.image('bullet', 'assets/bullet.png');
        this.load.spritesheet('malvin', 'assets/malvin.png', { frameWidth: 64, frameHeight: 64 });
        this.load.audio('escMusic', [
          'assets/Audio/musicEsc.mp3'
        ]);
        this.load.audio('hitSound', ['assets/Audio/icyHit.mp3']);
      },

      create: function () {
        this.add.image(400, 300, 'map');
        this.input.mouse.disableContextMenu();

        this.blocks = this.physics.add.staticGroup();


        this.blocks.create(80, 65, 'valla').setScale(0.95).refreshBody();
        this.blocks.create(410, 139, 'valla1').setScale(0.95).refreshBody();
        this.blocks.create(547, 101, 'valla2').setScale(0.95).refreshBody();
        this.blocks.create(410, 334, 'valla3').setScale(0.95).refreshBody();


        //Declaración de PJs y NPCs
        this.enemies = this.add.group({
          classType: Enemy,
          runChildUpdate: false
        });

        this.generateEnemies(2);

        //Jugadores
        this.player = new Player(this, 300, 450);
        this.player2 = new Player(this, 500, 450);
        this.players = [this.player, this.player2];

        //Control de colisiones de mundo
        this.initCollisions();

        // BOTONES
        var pause = this.add.image(400, 20, 'pause').setInteractive();
        var musicAct = this.add.image(400, 570, 'musicActive').setInteractive();
        var musicInact = this.add.image(400, 570, 'musicInactive').setInteractive();

        // INVENTARIO
        this.add.image(120, 560, 'inventory');
        var swordButtonSelec = this.add.image(100, 560, 'swordSelec').setInteractive().setVisible(false);
        var swordButton = this.add.image(100, 560, 'sword').setInteractive();
        swordButton.on('pointerdown', function () {
          console.log('espada seleccionada');
          swordButtonSelec.visible = true;
          swordButton.visible = false;
        });
        swordButtonSelec.on('pointerdown', function () {
          console.log('espada deseleccionada');
          swordButtonSelec.visible = false;
          swordButton.visible = true;
        });


        // BARRAS DE VIDA
        this.add.image(100, 30, 'lifeBarP1');
        this.player.lifeBar = new LifeBar(this, 53, 24);

        this.add.image(700, 30, 'lifeBarP2');
        this.player2.lifeBar = new LifeBar(this, 614, 24);

        //MUSICA
        musicInact.visible = false;
        //this.player.hitSound = this.sound.add('hitSound');
        var music = this.sound.add('escMusic');
        //music.play();
        musicAct.on('pointerdown', function () {
          console.log("Musica desactivada");
          musicInact.visible = true;
          musicAct.visible = false;
          music.stop();
        });
        musicInact.on('pointerdown', function () {
          console.log("Musica activada");
          musicInact.visible = false;
          musicAct.visible = true;
          music.play();
        });

        //OPCIONES
        pause.on('pointerdown', function () {
          console.log("Pausa");

          // aqui se cambia al menu de pausa
        });


        this.physics.add.overlap(this.player.attackHitbox, this.enemies, this.enemiesDamaged, undefined, this)
        this.physics.add.overlap(this.player2.attackHitbox, this.enemies, this.enemiesDamaged, undefined, this)

      },

      update: function () {

        this.player.move(this, this.enemies);

        this.enemies.children.each(function (enem) {
          enem.hunt(this.players);
        }, this);


        //Jugador 2
        this.player2.checkGamepad();
        if (this.player2.control) {
          this.add.existing(this.player2);
          this.physics.add.existing(this.player2);
          this.player2.setCollideWorldBounds(true);
          this.player2.setSize(30, 30);
          this.player2.setOffset(17, 28);
          this.player2.move(this);

        }


      },

      initCollisions: function () {
        this.add.existing(this.player);
        this.physics.add.existing(this.player);
        this.player.setCollideWorldBounds(true);
        this.player.setSize(30, 30);
        this.player.setOffset(17, 28);

        //HitBox Enemigos
        this.enemies.children.each(function (enem) {
          enem.setSize(30, 30);
          enem.setOffset(17, 28);
        }, this);

        //Colisiones de mundo
        this.physics.add.collider(this.player, this.enemies);
        this.physics.add.collider(this.player, this.blocks);
        this.physics.add.collider(this.enemies, this.enemies);
        this.physics.add.collider(this.enemies, this.blocks);
        this.physics.add.collider(this.player2, this.enemies);
        this.physics.add.collider(this.player2, this.blocks);

      },

      generateEnemies: function (number) {
        for (var i = 0; i < number; i++) {
          this.enemies.get(Phaser.Math.Between(100, 500),
            Phaser.Math.Between(100, 700), 'malvin');
        }
      },


      enemiesDamaged: function (player, enemy) {
        enemy.getHurt(player.attackDmg);
      },

    });

    var PantallaInicio = new Phaser.Class({
      Extends: Phaser.Scene,

      initialize:

        function PantallaInicio() {
          Phaser.Scene.call(this, { key: 'PantallaInicio' });
        },

      preload: function () {
        this.load.image("sky", "assets/sky.png");
        this.load.image("logo", "assets/logo/LogoI-Scream.png");
        this.load.spritesheet('BotonPlay',
          'assets/BotonPlay.png',
          { frameWidth: 64, frameHeight: 64 }
        );
      },
      create: function () {
        //this.add.image(this.game.renderer.width/2, this.game.renderer.height*0.20, "star");
        this.add.image(400, 300, "sky");
        this.add.image(60, 0, "logo").setOrigin(0);
        this.playButton = this.add.sprite(300, 300, "BotonPlay").setInteractive();
        this.playButton.scale = 3;

        this.playButton.on("pointerup", () => {
          console.log("Open the gates")
          this.scene.start('mainGame');
        })
      },
      update: function (time, delta) {
        this.playButton.on("pointover", () => {
          console.log("Encima del boton")
        })

        this.playButton.on("pointerout", () => {
          console.log("Saliendo del boton")
        })


      }
    });

    var PantallaCarga = new Phaser.Class({
      Extends: Phaser.Scene,

      initialize:

        function PantallaCarga() {
          Phaser.Scene.call(this, { key: 'PantallaCarga' });
        },

      preload: function () {
        let loadingBar = this.add.graphics({
          fillStyle: {
            color: 0xffffff //color barra de cargar (CAMBIAR)
          }
        });

        //Loader events:
        //-complete: done loading everything
        //-progress: loader number of progress in decimal

        //Simulate large load
        /*
        for(let i  = 0; i < 100; i++){
            this.load.spritesheet('BotonPlay',
            'assets/BotonPlay.png',
            { frameWidth: 50, frameHeight: 60 });
        }
        */

        this.load.on("progress", (percent) => {
          loadingBar.fillRect(0, this.game.renderer.height / 2, this.game.renderer.width * percent, 50);
          console.log(percent);
        });

        this.load.on("complete", () => {
          console.log('done');
        });

      },

      create: function () {
        this.scene.start('PantallaInicio'); //esta linea para visualizar directamente Menu Ppal
      }
    })


    const config = {
      type: Phaser.Auto,
      width: 800,
      height: 600,
      input: {
        gamepad: true
      },
      pixelArt: true,
      physics: {
        default: 'arcade',
        arcade: {
          gravity: { y: 0 },
          debug: true
        }
      },

      parent: 'container',
      backgroundColor: '#34495E',

      banner: {
        hidePhaser: false,
        text: '#000000',
        background: [
          'red',
          'yellow',
          'red',
          'transparent'
        ]
      },
      scene: [MainGame]
    };

    var game = new Phaser.Game(config);

  </script>
</body>



</html>
